name: 🚀 CI/CD Pipeline - Docker Hub & Render Deploy

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: dockerdav11
  IMAGE_NAME: holamundodavila
  
jobs:
  # Job 1: Build y Test
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🧪 Run tests
      run: |
        echo "Running application tests..."
        npm test --if-present
        
    - name: 🔍 Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  # Job 2: Docker Build y Push
  docker-build-push:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔨 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔐 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: 🛡️ Scan image for vulnerabilities
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        fail-build: false
        
    - name: 📊 Docker image info
      run: |
        echo "### 🐳 Docker Image Built Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY

  # Job 3: Deploy a Render.com
  deploy-render:
    name: 🚀 Deploy to Render
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Render
      id: deploy
      run: |
        echo "🚀 Deploying to Render.com..."
        
        # Configurar variables
        SERVICE_ID="${{ secrets.RENDER_SERVICE_ID }}"
        API_KEY="${{ secrets.RENDER_API_KEY }}"
        IMAGE_URL="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        
        # Verificar que tenemos las variables necesarias
        if [ -z "$SERVICE_ID" ] || [ -z "$API_KEY" ]; then
          echo "❌ Error: RENDER_SERVICE_ID y RENDER_API_KEY son requeridos"
          exit 1
        fi
        
        # Hacer deploy usando la API de Render
        DEPLOY_RESPONSE=$(curl -s -X POST \
          "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${API_KEY}" \
          -H "Content-Type: application/json" \
          -d "{
            \"clearCache\": \"clear\"
          }")
        
        # Extraer deploy ID
        DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id')
        
        if [ "$DEPLOY_ID" = "null" ] || [ -z "$DEPLOY_ID" ]; then
          echo "❌ Error al crear deploy: $DEPLOY_RESPONSE"
          exit 1
        fi
        
        echo "✅ Deploy iniciado con ID: $DEPLOY_ID"
        echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
        
        # Monitorear el deploy
        echo "📊 Monitoreando deploy..."
        for i in {1..30}; do
          sleep 10
          STATUS_RESPONSE=$(curl -s \
            "https://api.render.com/v1/services/${SERVICE_ID}/deploys/${DEPLOY_ID}" \
            -H "Authorization: Bearer ${API_KEY}")
          
          STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')
          echo "Deploy status: $STATUS"
          
          if [ "$STATUS" = "live" ]; then
            echo "🎉 Deploy completado exitosamente!"
            break
          elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "update_failed" ]; then
            echo "❌ Deploy falló con status: $STATUS"
            exit 1
          fi
          
          if [ $i -eq 30 ]; then
            echo "⏰ Timeout esperando deploy"
            exit 1
          fi
        done
        
    - name: 🌐 Get service URL
      run: |
        SERVICE_ID="${{ secrets.RENDER_SERVICE_ID }}"
        API_KEY="${{ secrets.RENDER_API_KEY }}"
        
        SERVICE_INFO=$(curl -s \
          "https://api.render.com/v1/services/${SERVICE_ID}" \
          -H "Authorization: Bearer ${API_KEY}")
        
        SERVICE_URL=$(echo $SERVICE_INFO | jq -r '.serviceDetails.url')
        
        echo "### 🚀 Deployment Successful! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Application URL:** [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "**Deploy ID:** \`${{ steps.deploy.outputs.deploy_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image:** \`${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔍 Health Check
      run: |
        SERVICE_ID="${{ secrets.RENDER_SERVICE_ID }}"
        API_KEY="${{ secrets.RENDER_API_KEY }}"
        
        # Obtener URL del servicio
        SERVICE_INFO=$(curl -s \
          "https://api.render.com/v1/services/${SERVICE_ID}" \
          -H "Authorization: Bearer ${API_KEY}")
        
        SERVICE_URL=$(echo $SERVICE_INFO | jq -r '.serviceDetails.url')
        
        # Hacer health check
        echo "🔍 Realizando health check en $SERVICE_URL/health"
        
        for i in {1..10}; do
          sleep 5
          if curl -f -s "$SERVICE_URL/health" > /dev/null; then
            echo "✅ Health check exitoso!"
            curl -s "$SERVICE_URL/health" | jq .
            break
          else
            echo "⏳ Esperando que la aplicación esté lista... (intento $i/10)"
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Health check falló después de 10 intentos"
            exit 1
          fi
        done

  # Job 4: Notificaciones
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, deploy-render]
    if: always()
    
    steps:
    - name: 📢 Build Summary
      run: |
        echo "### 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build & Push | ${{ needs.docker-build-push.result == 'success' && '✅' || '❌' }} ${{ needs.docker-build-push.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy to Render | ${{ needs.deploy-render.result == 'success' && '✅' || '❌' }} ${{ needs.deploy-render.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
